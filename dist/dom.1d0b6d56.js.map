{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContext","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\n    create(string) {\n        const container = document.createElement('template')\n        container.innerHTML = string.trim()\n        return container.content.firstChild\n    },\n    after(node, node2) {\n        //insertBefore(newItem ,existingItem)\n        node.parentNode.insertBefore(node2, node.nextSibling)\n    },\n    before(node, node2) {\n        //insertBefore(newItem ,existingItem)\n        node.parentNode.insertBefore(node2, node)\n    },\n    append(parent, node) {\n        parent.appendChild(node)\n    },\n    wrap(node, parent) {\n        //将新节点插入已有节点之前\n        dom.before(node, parent)\n        //将已有节点作为新节点的子节点\n        dom.append(parent, node)\n    },\n    remove(node) {\n        node.parentNode.removeChild(node)\n        //node.remove()较新，IE不支持\n        return node\n    },\n    empty(node) {\n        // 等于 const childNodes = node.childNodes\n        const { childNodes } = node\n        const array = []\n        let x = node.firstChild\n        // 因为node.firstChild是动态的，原有的firstChild被移除后，第二个孩子节点变为firstChild\n        while (x) {\n            array.push(dom.remove(x))\n            x = node.firstChild\n        }\n        return array\n    },\n    attr(node, name, value) {//重载\n        if (arguments.length === 3) {\n            node.setAttribute(name, value)\n        } else if (arguments.length === 2) {\n            return node.getAttribute(name)\n        }\n    },\n    text(node, string) { //适配\n        if (arguments.length === 2) {\n            if ('innerText' in node) {\n                node.innerText = string // IE\n            } else {\n                node.textContext = string\n            }\n        } else if (arguments.length === 1) {\n            if ('innerText' in node) {\n                return node.innerText // IE\n            } else {\n                return node.textContext\n            }\n        }\n    },\n    html(node, string) {\n        if (arguments.length === 2) {\n            node.innerHTML = string\n        } else if (arguments.length === 1) {\n            return node.innerHTML\n        }\n    },\n    style(node, name, value) {\n        if (arguments.length === 3) {\n            // dom.style(node, 'color', 'blue')\n            node.style[name] = value\n        } else if (arguments.length === 2) {\n            if (typeof name === 'string') {\n                //dom.style(node, 'color')\n                return node.style[name]\n            } else if (name instanceof Object) {\n                //dom.style(node, {color: 'red'}\n                const object = name\n                for (let key in object) {\n                    //key : border / color\n                    node.style[key] = object[key]\n                }\n            }\n        }\n    },\n    class: {\n        //使用节点的classList属性\n        add(node, className) {\n            node.classList.add(className)\n        },\n        remove(node, className) {\n            node.classList.remove(className)\n        },\n        has(node, className) {\n            //使用node.classList.contains()来判断是否含有对应属性\n            return node.classList.contains(className)\n        }\n    },\n    on(node, eventName, fn) {\n        node.addEventListener(eventName, fn)\n    },\n    off(node, eventName, fn) {\n        node.removeEventListener(eventName, fn)\n    },\n    find(selector, scope) {\n        //若scope不为空，则使用scope，否则使用document\n        //返回的是list\n        return (scope || document).querySelectorAll(selector)\n    },\n    parent(node) {\n        return node.parentNode\n    },\n    children(node) {\n        return node.children\n    },\n    siblings(node) {\n        //node.children返回的是伪数组，使用Array.from将其转换为Array\n        return Array.from(node.parentNode.children).filter(n => n !== node)\n    },\n    next(node) {\n        let x = node.nextSibling\n        //node.nextSibling返回的数据包含文本节点\n        while (x && x.nodeType === 3) {\n            //nextSibling的数据为动态\n            x = x.nextSibling\n        }\n        return x\n    },\n    previous(node) {\n        let x = node.previousSibling\n        //node.nextSibling返回的数据包含文本节点\n        while (x && x.nodeType === 3) {\n            x = x.previousSibling\n        }\n        return x\n    },\n    each(nodeList, fn) {\n        for (let i = 0; i < nodeList.length; i++) {\n            fn.call(null, nodeList[i])\n        }\n    },\n    index(node) {\n        const list = dom.children(node.parentNode)\n        //遍历节点\n        let i\n        for (i = 0; i < list.length; i++) {\n            if (list[i] === node) {\n                break\n            }\n        }\n        return i\n    }\n}"]}